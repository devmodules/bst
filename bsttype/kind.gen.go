// Code generated by "enumer -type=Kind -trimprefix=Kind -output=kind.gen.go"; DO NOT EDIT.

package bsttype

import (
	"fmt"
	"strings"
)

const _KindName = "UndefinedBooleanIntInt8Int16Int32Int64UintUint8Uint16Uint32Uint64Float32Float64StringDurationAnyTimestampNamedBytesStructArrayMapEnumDateTimeNullableOneOf"

var _KindIndex = [...]uint8{0, 9, 16, 19, 23, 28, 33, 38, 42, 47, 53, 59, 65, 72, 79, 85, 93, 96, 105, 110, 115, 121, 126, 129, 133, 141, 149, 154}

const _KindLowerName = "undefinedbooleanintint8int16int32int64uintuint8uint16uint32uint64float32float64stringdurationanytimestampnamedbytesstructarraymapenumdatetimenullableoneof"

func (i Kind) String() string {
	if i >= Kind(len(_KindIndex)-1) {
		return fmt.Sprintf("Kind(%d)", i)
	}
	return _KindName[_KindIndex[i]:_KindIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KindNoOp() {
	var x [1]struct{}
	_ = x[KindUndefined-(0)]
	_ = x[KindBoolean-(1)]
	_ = x[KindInt-(2)]
	_ = x[KindInt8-(3)]
	_ = x[KindInt16-(4)]
	_ = x[KindInt32-(5)]
	_ = x[KindInt64-(6)]
	_ = x[KindUint-(7)]
	_ = x[KindUint8-(8)]
	_ = x[KindUint16-(9)]
	_ = x[KindUint32-(10)]
	_ = x[KindUint64-(11)]
	_ = x[KindFloat32-(12)]
	_ = x[KindFloat64-(13)]
	_ = x[KindString-(14)]
	_ = x[KindDuration-(15)]
	_ = x[KindAny-(16)]
	_ = x[KindTimestamp-(17)]
	_ = x[KindNamed-(18)]
	_ = x[KindBytes-(19)]
	_ = x[KindStruct-(20)]
	_ = x[KindArray-(21)]
	_ = x[KindMap-(22)]
	_ = x[KindEnum-(23)]
	_ = x[KindDateTime-(24)]
	_ = x[KindNullable-(25)]
	_ = x[KindOneOf-(26)]
}

var _KindValues = []Kind{KindUndefined, KindBoolean, KindInt, KindInt8, KindInt16, KindInt32, KindInt64, KindUint, KindUint8, KindUint16, KindUint32, KindUint64, KindFloat32, KindFloat64, KindString, KindDuration, KindAny, KindTimestamp, KindNamed, KindBytes, KindStruct, KindArray, KindMap, KindEnum, KindDateTime, KindNullable, KindOneOf}

var _KindNameToValueMap = map[string]Kind{
	_KindName[0:9]:          KindUndefined,
	_KindLowerName[0:9]:     KindUndefined,
	_KindName[9:16]:         KindBoolean,
	_KindLowerName[9:16]:    KindBoolean,
	_KindName[16:19]:        KindInt,
	_KindLowerName[16:19]:   KindInt,
	_KindName[19:23]:        KindInt8,
	_KindLowerName[19:23]:   KindInt8,
	_KindName[23:28]:        KindInt16,
	_KindLowerName[23:28]:   KindInt16,
	_KindName[28:33]:        KindInt32,
	_KindLowerName[28:33]:   KindInt32,
	_KindName[33:38]:        KindInt64,
	_KindLowerName[33:38]:   KindInt64,
	_KindName[38:42]:        KindUint,
	_KindLowerName[38:42]:   KindUint,
	_KindName[42:47]:        KindUint8,
	_KindLowerName[42:47]:   KindUint8,
	_KindName[47:53]:        KindUint16,
	_KindLowerName[47:53]:   KindUint16,
	_KindName[53:59]:        KindUint32,
	_KindLowerName[53:59]:   KindUint32,
	_KindName[59:65]:        KindUint64,
	_KindLowerName[59:65]:   KindUint64,
	_KindName[65:72]:        KindFloat32,
	_KindLowerName[65:72]:   KindFloat32,
	_KindName[72:79]:        KindFloat64,
	_KindLowerName[72:79]:   KindFloat64,
	_KindName[79:85]:        KindString,
	_KindLowerName[79:85]:   KindString,
	_KindName[85:93]:        KindDuration,
	_KindLowerName[85:93]:   KindDuration,
	_KindName[93:96]:        KindAny,
	_KindLowerName[93:96]:   KindAny,
	_KindName[96:105]:       KindTimestamp,
	_KindLowerName[96:105]:  KindTimestamp,
	_KindName[105:110]:      KindNamed,
	_KindLowerName[105:110]: KindNamed,
	_KindName[110:115]:      KindBytes,
	_KindLowerName[110:115]: KindBytes,
	_KindName[115:121]:      KindStruct,
	_KindLowerName[115:121]: KindStruct,
	_KindName[121:126]:      KindArray,
	_KindLowerName[121:126]: KindArray,
	_KindName[126:129]:      KindMap,
	_KindLowerName[126:129]: KindMap,
	_KindName[129:133]:      KindEnum,
	_KindLowerName[129:133]: KindEnum,
	_KindName[133:141]:      KindDateTime,
	_KindLowerName[133:141]: KindDateTime,
	_KindName[141:149]:      KindNullable,
	_KindLowerName[141:149]: KindNullable,
	_KindName[149:154]:      KindOneOf,
	_KindLowerName[149:154]: KindOneOf,
}

var _KindNames = []string{
	_KindName[0:9],
	_KindName[9:16],
	_KindName[16:19],
	_KindName[19:23],
	_KindName[23:28],
	_KindName[28:33],
	_KindName[33:38],
	_KindName[38:42],
	_KindName[42:47],
	_KindName[47:53],
	_KindName[53:59],
	_KindName[59:65],
	_KindName[65:72],
	_KindName[72:79],
	_KindName[79:85],
	_KindName[85:93],
	_KindName[93:96],
	_KindName[96:105],
	_KindName[105:110],
	_KindName[110:115],
	_KindName[115:121],
	_KindName[121:126],
	_KindName[126:129],
	_KindName[129:133],
	_KindName[133:141],
	_KindName[141:149],
	_KindName[149:154],
}

// KindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KindString_(s string) (Kind, error) {
	if val, ok := _KindNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KindNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Kind values", s)
}

// KindValues returns all values of the enum
func KindValues() []Kind {
	return _KindValues
}

// KindStrings returns a slice of all String values of the enum
func KindStrings() []string {
	strs := make([]string, len(_KindNames))
	copy(strs, _KindNames)
	return strs
}

// IsAKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Kind) IsAKind() bool {
	for _, v := range _KindValues {
		if i == v {
			return true
		}
	}
	return false
}
